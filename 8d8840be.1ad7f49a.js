(window.webpackJsonp=window.webpackJsonp||[]).push([[368],{530:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"rightToc",(function(){return b})),a.d(t,"default",(function(){return c}));a(58),a(31),a(22),a(23),a(59),a(0);var n=a(812);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var s={id:"_lumin_.physicsshape",title:"PhysicsShape",sidebar_label:"PhysicsShape"},b=[{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Constructors",id:"constructors",children:[{value:"constructor",id:"constructor",children:[]}]},{value:"Methods",id:"methods",children:[{value:"getBoxSides",id:"getboxsides",children:[]},{value:"getCapsuleLength",id:"getcapsulelength",children:[]},{value:"getCapsuleRadius",id:"getcapsuleradius",children:[]},{value:"getMaterial",id:"getmaterial",children:[]},{value:"getShapeBehavior",id:"getshapebehavior",children:[]},{value:"getShapeType",id:"getshapetype",children:[]},{value:"getSphereRadius",id:"getsphereradius",children:[]},{value:"setMaterial",id:"setmaterial",children:[]}]}],p={rightToc:b},i="wrapper";function c(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(n.b)(i,r({},p,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"A shape that can be added to a PhysicsRigidBody. While the PhysicsRigidBody defines how the\nbody moves, due to its mass, PhysicsShapes define the actual shape of the body. PhysicsShapes\ncome in two general types: primitive, and mesh. Primitive shapes are plane, sphere, capsule,\nand box; they are defined by parameters such as radius and length. Mesh shapes are convex and\nopen; they are defined by mesh data similar to a 3d mesh for rendering."),Object(n.b)("p",null,"NOTE: mesh shapes are currently not supported."),Object(n.b)("p",null,"A shape can have one of two behaviors: collision or trigger. A collision shape will collide\nwith other collision shapes and generally act as expected in a physics simulation. A trigger\nshape does not collide with other shapes. However, if a collision shape enters or exits the\nbounds of a trigger shape, a PhysicsEventData server event will be generated with a kTriggerEnter\nor kTriggerExit type. Note a trigger shape interacting with another trigger shape does not\ngenerate an event."),Object(n.b)("p",null,"Multiple shapes can be added to a PhysicsRigidBody. The localPosition and localRotation of the\nshape sets its position relative to the position of the body."),Object(n.b)("p",null,"A shape may not be added to or removed from a PhysicsRigidBody once the body has been added to a Prism."),Object(n.b)("p",null,"A plane or open mesh shape cannot be added to a dynamic PhysicsRigidBody."),Object(n.b)("p",null,"Note that PhysicsShape have no setters for its data. If you want to modify a shape, you must\ncreate a new one."),Object(n.b)("h2",{id:"hierarchy"},"Hierarchy"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"PhysicsShape"))),Object(n.b)("h2",{id:"constructors"},"Constructors"),Object(n.b)("h3",{id:"constructor"},"constructor"),Object(n.b)("p",null,"+"," ",Object(n.b)("strong",{parentName:"p"},"new PhysicsShape"),"(): ",Object(n.b)("em",{parentName:"p"},Object(n.b)("a",r({parentName:"em"},{href:"/docs/classes/_lumin_.physicsshape"}),"PhysicsShape"))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Returns:")," ",Object(n.b)("em",{parentName:"p"},Object(n.b)("a",r({parentName:"em"},{href:"/docs/classes/_lumin_.physicsshape"}),"PhysicsShape"))),Object(n.b)("h2",{id:"methods"},"Methods"),Object(n.b)("h3",{id:"getboxsides"},"getBoxSides"),Object(n.b)("p",null,"\u25b8 ",Object(n.b)("strong",{parentName:"p"},"getBoxSides"),"(): ",Object(n.b)("em",{parentName:"p"},"[number, number, number]")),Object(n.b)("p",null,"Returns the side lengths of a box shape."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},Object(n.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Returns:")," ",Object(n.b)("em",{parentName:"p"},"[number, number, number]")),Object(n.b)("p",null,"The lengths, or undefined if the shape isn't a box."),Object(n.b)("hr",null),Object(n.b)("h3",{id:"getcapsulelength"},"getCapsuleLength"),Object(n.b)("p",null,"\u25b8 ",Object(n.b)("strong",{parentName:"p"},"getCapsuleLength"),"(): ",Object(n.b)("em",{parentName:"p"},"number")),Object(n.b)("p",null,"Returns the length of a capsule shape. The length is for the cylinder part of the shape,\nit does not include the caps."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},Object(n.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Returns:")," ",Object(n.b)("em",{parentName:"p"},"number")),Object(n.b)("p",null,"The length, or undefined if the shape isn't a capsule."),Object(n.b)("hr",null),Object(n.b)("h3",{id:"getcapsuleradius"},"getCapsuleRadius"),Object(n.b)("p",null,"\u25b8 ",Object(n.b)("strong",{parentName:"p"},"getCapsuleRadius"),"(): ",Object(n.b)("em",{parentName:"p"},"number")),Object(n.b)("p",null,"Returns the radius of a capsule shape."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},Object(n.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Returns:")," ",Object(n.b)("em",{parentName:"p"},"number")),Object(n.b)("p",null,"The radius, or undefined if the shape isn't a capsule."),Object(n.b)("hr",null),Object(n.b)("h3",{id:"getmaterial"},"getMaterial"),Object(n.b)("p",null,"\u25b8 ",Object(n.b)("strong",{parentName:"p"},"getMaterial"),"(): ",Object(n.b)("em",{parentName:"p"},Object(n.b)("a",r({parentName:"em"},{href:"/docs/classes/_lumin_.physicsmaterial"}),"PhysicsMaterial"))),Object(n.b)("p",null,"Returns the PhysicsMaterial for this shape."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},Object(n.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Returns:")," ",Object(n.b)("em",{parentName:"p"},Object(n.b)("a",r({parentName:"em"},{href:"/docs/classes/_lumin_.physicsmaterial"}),"PhysicsMaterial"))),Object(n.b)("p",null,"the material"),Object(n.b)("hr",null),Object(n.b)("h3",{id:"getshapebehavior"},"getShapeBehavior"),Object(n.b)("p",null,"\u25b8 ",Object(n.b)("strong",{parentName:"p"},"getShapeBehavior"),"(): ",Object(n.b)("em",{parentName:"p"},Object(n.b)("a",r({parentName:"em"},{href:"/docs/enums/_lumin_.physics.shapebehavior"}),"ShapeBehavior"))),Object(n.b)("p",null,"Returns the shape behavior."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},Object(n.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Returns:")," ",Object(n.b)("em",{parentName:"p"},Object(n.b)("a",r({parentName:"em"},{href:"/docs/enums/_lumin_.physics.shapebehavior"}),"ShapeBehavior"))),Object(n.b)("p",null,"the behavior"),Object(n.b)("hr",null),Object(n.b)("h3",{id:"getshapetype"},"getShapeType"),Object(n.b)("p",null,"\u25b8 ",Object(n.b)("strong",{parentName:"p"},"getShapeType"),"(): ",Object(n.b)("em",{parentName:"p"},Object(n.b)("a",r({parentName:"em"},{href:"/docs/enums/_lumin_.physics.shapetype"}),"ShapeType"))),Object(n.b)("p",null,"Returns the shape type."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},Object(n.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Returns:")," ",Object(n.b)("em",{parentName:"p"},Object(n.b)("a",r({parentName:"em"},{href:"/docs/enums/_lumin_.physics.shapetype"}),"ShapeType"))),Object(n.b)("p",null,"the type"),Object(n.b)("hr",null),Object(n.b)("h3",{id:"getsphereradius"},"getSphereRadius"),Object(n.b)("p",null,"\u25b8 ",Object(n.b)("strong",{parentName:"p"},"getSphereRadius"),"(): ",Object(n.b)("em",{parentName:"p"},"number")),Object(n.b)("p",null,"Returns the radius of a sphere shape."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},Object(n.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Returns:")," ",Object(n.b)("em",{parentName:"p"},"number")),Object(n.b)("p",null,"The radius, or undefined if the shape isn't a sphere."),Object(n.b)("hr",null),Object(n.b)("h3",{id:"setmaterial"},"setMaterial"),Object(n.b)("p",null,"\u25b8 ",Object(n.b)("strong",{parentName:"p"},"setMaterial"),"(",Object(n.b)("inlineCode",{parentName:"p"},"material"),": ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/classes/_lumin_.physicsmaterial"}),"PhysicsMaterial"),"): ",Object(n.b)("em",{parentName:"p"},"void")),Object(n.b)("p",null,"Sets the PhysicsMaterial for the shape."),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},Object(n.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Parameters:")),Object(n.b)("table",null,Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"Name"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"Type"),Object(n.b)("th",r({parentName:"tr"},{align:null}),"Description"))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"material")),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("a",r({parentName:"td"},{href:"/docs/classes/_lumin_.physicsmaterial"}),"PhysicsMaterial")),Object(n.b)("td",r({parentName:"tr"},{align:null}),"The Material")))),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Returns:")," ",Object(n.b)("em",{parentName:"p"},"void")))}c.isMDXComponent=!0},812:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return o}));var n=a(0),r=a.n(n),s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):Object.assign({},t,e)),a},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)};var i="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},l=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,p=e.parentName,i=function(e,t){var a={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===t.indexOf(n)&&(a[n]=e[n]);return a}(e,["components","mdxType","originalType","parentName"]),l=b(a),o=n,h=l[p+"."+o]||l[o]||c[o]||s;return a?r.a.createElement(h,Object.assign({},{ref:t},i,{components:a})):r.a.createElement(h,Object.assign({},{ref:t},i))}));function o(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,b=new Array(s);b[0]=l;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[i]="string"==typeof e?e:n,b[1]=p;for(var o=2;o<s;o++)b[o]=a[o];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,a)}l.displayName="MDXCreateElement"}}]);