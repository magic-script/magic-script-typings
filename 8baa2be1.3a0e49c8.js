(window.webpackJsonp=window.webpackJsonp||[]).push([[364],{536:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return o}));n(58),n(31),n(22),n(23),n(59),n(0);var r=n(812);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var l={id:"_lumin_.prismcontroller",title:"PrismController",sidebar_label:"PrismController"},b=[{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Constructors",id:"constructors",children:[{value:"constructor",id:"constructor",children:[]}]},{value:"Methods",id:"methods",children:[{value:"addChildController",id:"addchildcontroller",children:[]},{value:"deleteSceneGraph",id:"deletescenegraph",children:[]},{value:"getEventSleepTime",id:"geteventsleeptime",children:[]},{value:"getName",id:"getname",children:[]},{value:"getPrism",id:"getprism",children:[]},{value:"getRoot",id:"getroot",children:[]},{value:"isPrismDeletePending",id:"isprismdeletepending",children:[]},{value:"onAttachPrism",id:"onattachprism",children:[]},{value:"onDetachPrism",id:"ondetachprism",children:[]},{value:"onEvent",id:"onevent",children:[]},{value:"onPreAttachPrism",id:"onpreattachprism",children:[]},{value:"onUpdate",id:"onupdate",children:[]},{value:"removeChildController",id:"removechildcontroller",children:[]},{value:"setEventSleepTime",id:"seteventsleeptime",children:[]},{value:"setRetainSceneGraph",id:"setretainscenegraph",children:[]}]}],i={rightToc:b},c="wrapper";function o(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(r.b)(c,a({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"A PrismController represents a section of an application's UI or behavior that is tied to\na specific Prism."),Object(r.b)("p",null,"A single PrismController can be set directly on a Prism (the root prism controller).\nIt will receive event and update loop callbacks for that prism until it is detached or\nthe prism is deleted. Additional PrismControllers can be added to the root controller to\ncreate a hierarchy of arbitrary depth. This allows re-usable components like a video player\nto be added to an application with a single integration point:"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"myRootPrismController->addChildController(videoPlayer)")),Object(r.b)("p",null,"In the example above, PrismController eliminates the need for applications to manually\nprovide the videoPlayer component with onEvent and onUpdate callbacks."),Object(r.b)("p",null,"When a child controller is added or removed while a prism is already attached, it\nwill receive an onAttachPrism or onDetachPrism callback, respectively, ensuring\nthat the sequence of callbacks a prism controller receive is always:"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{}),"- onAttachPrism\n- onEvent* (any number of calls)\n- onUpdate* (any number of calls)\n- onDetachPrism\n")),Object(r.b)("p",null,"Different prism controllers can be attached to the same Prism over time in\norder to render different scenes within the same prism (e.g. a home navigation\nscene vs. an application settings scene)."),Object(r.b)("p",null,"A typical sequence of callbacks is shown in the example below:"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{}),"controllerA = std::make_shared<MyPrismController>()\nprism->setPrismController(controllerA)\nCALLBACK: controllerA->onAttachPrism\n// --\x3e event from Lumin\nCALLBACK: controllerA->onEvent\n...\n\n// Time to show a completely different scene in this prism\ncontrollerB = std::make_shared<MyOtherPrismController>()\nprism->setPrismController(controllerB)\n// Remove old scene\nCALLBACK: controllerA->onDetachPrism\n// Initialize new scene\nCALLBACK: controllerB->onAttachPrism\n// --\x3e event from Lumin\nCALLBACK: controllerB->onEvent\n...\n// Add a video player to the scene\nvideoPlayer = std::make_shared<VideoPlayerController>()\ncontrollerB->addChildController(videoPlayer)\nCALLBACK: videoPlayer->onAttachPrism\n// --\x3e event from Lumin\nCALLBACK: videoPlayer->onEvent\nCALLBACK: controllerB->onEvent\n// --\x3e prism is deleted (e.g. from secondary UI)\n// (isPrismDeletePending() returns true during next 2 callbacks)\nCALLBACK controllerB->onDetachPrism\nCALLBACK videoPlayer->onDetachPrism\n")),Object(r.b)("h2",{id:"hierarchy"},"Hierarchy"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"PrismController"))),Object(r.b)("h2",{id:"constructors"},"Constructors"),Object(r.b)("h3",{id:"constructor"},"constructor"),Object(r.b)("p",null,"+"," ",Object(r.b)("strong",{parentName:"p"},"new PrismController"),"(",Object(r.b)("inlineCode",{parentName:"p"},"a_name?"),": string): ",Object(r.b)("em",{parentName:"p"},Object(r.b)("a",a({parentName:"em"},{href:"_lumin_.prismcontroller.md"}),"PrismController"))),Object(r.b)("p",null,"Constructor."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Parameters:")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",a({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"a_name?")),Object(r.b)("td",a({parentName:"tr"},{align:null}),"string"),Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},'default = ""'),Object(r.b)("br",null)," - String used to identify this controller for diagnostics")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},Object(r.b)("a",a({parentName:"em"},{href:"_lumin_.prismcontroller.md"}),"PrismController"))),Object(r.b)("h2",{id:"methods"},"Methods"),Object(r.b)("h3",{id:"addchildcontroller"},"addChildController"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"addChildController"),"(",Object(r.b)("inlineCode",{parentName:"p"},"controller"),": ",Object(r.b)("a",a({parentName:"p"},{href:"_lumin_.prismcontroller.md"}),"PrismController"),"): ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("p",null,"Adds a prism controller as a child."),Object(r.b)("p",null,"It will receive all onEvent callbacks received by this controller (the parent).\nIf a prism is already attached, the child controller will also receive an\nonAttachPrism callback."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Parameters:")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",a({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"controller")),Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("a",a({parentName:"td"},{href:"_lumin_.prismcontroller.md"}),"PrismController")),Object(r.b)("td",a({parentName:"tr"},{align:null}),"The child controller to add")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"deletescenegraph"},"deleteSceneGraph"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"deleteSceneGraph"),"(): ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("p",null,"Deletes the part of the scene graph controlled by this prism controller."),Object(r.b)("p",null,"This is done by deleting the conroller's root node."),Object(r.b)("p",null,"NOTE: Must be called on the main thread."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"geteventsleeptime"},"getEventSleepTime"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"getEventSleepTime"),"(): ",Object(r.b)("em",{parentName:"p"},"number")),Object(r.b)("p",null,"Returns the minimum event sleep time taking into account all descendent controllers."),Object(r.b)("p",null,"This method will always return a value greater than zero. If a sleep time <= 0.f\nwas specified, this method will return MAX_CLIENT_SLEEP."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"number")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"getname"},"getName"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"getName"),"(): ",Object(r.b)("em",{parentName:"p"},"string")),Object(r.b)("p",null,"Returns the optional name for this PrismController (used for diagnostics)."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"string")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"getprism"},"getPrism"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"getPrism"),"(): ",Object(r.b)("em",{parentName:"p"},Object(r.b)("a",a({parentName:"em"},{href:"_lumin_.prism.md"}),"Prism"))),Object(r.b)("p",null,"Returns the prism this controller is attached to or nullptr if detached."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},Object(r.b)("a",a({parentName:"em"},{href:"_lumin_.prism.md"}),"Prism"))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"getroot"},"getRoot"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"getRoot"),"(): ",Object(r.b)("em",{parentName:"p"},Object(r.b)("a",a({parentName:"em"},{href:"_lumin_.transformnode.md"}),"TransformNode"))),Object(r.b)("p",null,"Returns the root node for the segment of the scene graph managed by this controller."),Object(r.b)("p",null,"It will be created the first time this method is called (once the prism is attached).\nFor non-UI controllers, this method should never be called and the root node will never\nbe created. For controllers attached directly to the Prism, this method will be\ncalled internally and the controller root node will be added to the prism root node."),Object(r.b)("p",null,"NOTE: Must be called on the main thread."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},Object(r.b)("a",a({parentName:"em"},{href:"_lumin_.transformnode.md"}),"TransformNode"))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"isprismdeletepending"},"isPrismDeletePending"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"isPrismDeletePending"),"(): ",Object(r.b)("em",{parentName:"p"},"boolean")),Object(r.b)("p",null,"Returns true if the attached client prism is in the process of being deleted."),Object(r.b)("p",null,"Specifically, this method will return true during onDetachPrism callbacks that were\ntriggered by prism deletion."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"boolean")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"onattachprism"},"onAttachPrism"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"onAttachPrism"),"(",Object(r.b)("inlineCode",{parentName:"p"},"prism"),": ",Object(r.b)("a",a({parentName:"p"},{href:"_lumin_.prism.md"}),"Prism"),"): ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("p",null,"Override this method to initialize the Prism after this\ncontroller has been attached."),Object(r.b)("p",null,"At this stage, getPrism() and getRoot() will both return valid values."),Object(r.b)("p",null,"Full scene graph initialization can be performed at this stage. The callback\nwill happen for child controllers first, so that all children will be fully\ninitialized before this method is called on the parent. Parent controllers can\nthen attach child controller scene graph segments as needed."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Parameters:")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",a({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Type"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"prism")),Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("a",a({parentName:"td"},{href:"_lumin_.prism.md"}),"Prism"))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"ondetachprism"},"onDetachPrism"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"onDetachPrism"),"(",Object(r.b)("inlineCode",{parentName:"p"},"prism"),": ",Object(r.b)("a",a({parentName:"p"},{href:"_lumin_.prism.md"}),"Prism"),"): ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("p",null,"Override this method to do any necessary cleanup before the\nPrism is destroyed or attached to a different controller."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"see"))," onAttachPrism"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"see"))," isPrismDeletePending"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Parameters:")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",a({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Type"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"prism")),Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("a",a({parentName:"td"},{href:"_lumin_.prism.md"}),"Prism"))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"onevent"},"onEvent"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"onEvent"),"(",Object(r.b)("inlineCode",{parentName:"p"},"a_pEvent"),": ",Object(r.b)("a",a({parentName:"p"},{href:"_lumin_.serverevent.md"}),"ServerEvent"),"): ",Object(r.b)("em",{parentName:"p"},"boolean")),Object(r.b)("p",null,"Override this method to react to incoming events"),Object(r.b)("p",null,"Note: This is triggered on the client main thread"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Parameters:")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",a({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"a_pEvent")),Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("a",a({parentName:"td"},{href:"_lumin_.serverevent.md"}),"ServerEvent")),Object(r.b)("td",a({parentName:"tr"},{align:null}),"Server Events")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"boolean")),Object(r.b)("p",null,"true = Event has been consumed"),Object(r.b)("hr",null),Object(r.b)("h3",{id:"onpreattachprism"},"onPreAttachPrism"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"onPreAttachPrism"),"(",Object(r.b)("inlineCode",{parentName:"p"},"prism"),": ",Object(r.b)("a",a({parentName:"p"},{href:"_lumin_.prism.md"}),"Prism"),"): ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("p",null,"Override this method to initialize the Prism when this\ncontroller is about to be attached."),Object(r.b)("p",null,"NOTE: At this stage, getPrism() and getRoot() will both return nullptr."),Object(r.b)("p",null,"The main purpose of this callback is to allow parent controllers to do\nvery basic initialization that child controllers may depend on (e.g. resizing\nthe prism itself for the root controller). For this reason, the callback will\nhappen for parent controllers first, followed by their children."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Parameters:")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",a({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Type"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"prism")),Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("a",a({parentName:"td"},{href:"_lumin_.prism.md"}),"Prism"))))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"onupdate"},"onUpdate"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"onUpdate"),"(",Object(r.b)("inlineCode",{parentName:"p"},"a_fDelta"),": number): ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("p",null,"Override this method to get periodic callbacks on the client main thread"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Parameters:")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",a({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"a_fDelta")),Object(r.b)("td",a({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",a({parentName:"tr"},{align:null}),"Time Delta since last frame")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"removechildcontroller"},"removeChildController"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"removeChildController"),"(",Object(r.b)("inlineCode",{parentName:"p"},"controller"),": ",Object(r.b)("a",a({parentName:"p"},{href:"_lumin_.prismcontroller.md"}),"PrismController"),"): ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("p",null,"Removes the specified controller as a child."),Object(r.b)("p",null,"If a prism is currently attached, the removed child controller will receive\nan onDetachPrism callback."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Parameters:")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",a({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"controller")),Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("a",a({parentName:"td"},{href:"_lumin_.prismcontroller.md"}),"PrismController")),Object(r.b)("td",a({parentName:"tr"},{align:null}),"The child controller to remove")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"seteventsleeptime"},"setEventSleepTime"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"setEventSleepTime"),"(",Object(r.b)("inlineCode",{parentName:"p"},"a_fSleepTime"),": number): ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("p",null,"Set the Event Sleep Time\nSets The amount of time the client should sleep before firing\nthe updateloop callback. If no other event occured."),Object(r.b)("p",null,"NOTE: The exact event sleep time used internally may differ from the value specified\nhere but will always be less than or equal to it (within the allowed range)."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Parameters:")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",a({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"a_fSleepTime")),Object(r.b)("td",a({parentName:"tr"},{align:null}),"number"),Object(r.b)("td",a({parentName:"tr"},{align:null}),"0 = sleep infinitely till an event wakes up")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("hr",null),Object(r.b)("h3",{id:"setretainscenegraph"},"setRetainSceneGraph"),Object(r.b)("p",null,"\u25b8 ",Object(r.b)("strong",{parentName:"p"},"setRetainSceneGraph"),"(",Object(r.b)("inlineCode",{parentName:"p"},"retainSceneGraph"),": boolean): ",Object(r.b)("em",{parentName:"p"},"void")),Object(r.b)("p",null,"Sets whether the scene graph will be retained when this controller is detached\nfrom its Prism."),Object(r.b)("p",null,"This allows the scene graph to be reused if this controller is reattached to the\nsame prism again. Example use cases include paging between different scene\nfragments, or handling a back navigation to show the previous scene again."),Object(r.b)("p",null,"By default, the scene graph fragment managed by this controller will be deleted\non detach by deleting its root node."),Object(r.b)("p",null,"NOTE: If the prism is in the process of being deleted when it is detached, the\nscene graph will be deleted unconditionally (since it is about to be invalid)."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"priv"))," none"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Parameters:")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",a({parentName:"tr"},{align:null}),"Name"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Type"),Object(r.b)("th",a({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",a({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"retainSceneGraph")),Object(r.b)("td",a({parentName:"tr"},{align:null}),"boolean"),Object(r.b)("td",a({parentName:"tr"},{align:null}),"true to retain the scene graph on detach or        false to delete it (by deleting its root node).")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns:")," ",Object(r.b)("em",{parentName:"p"},"void")))}o.isMDXComponent=!0},812:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r),l=a.a.createContext({}),b=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},i=function(e){var t=b(e.components);return a.a.createElement(l.Provider,{value:t},e.children)};var c="mdxType",o={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),p=b(n),m=r,s=p[i+"."+m]||p[m]||o[m]||l;return n?a.a.createElement(s,Object.assign({},{ref:t},c,{components:n})):a.a.createElement(s,Object.assign({},{ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,b=new Array(l);b[0]=p;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:r,b[1]=i;for(var m=2;m<l;m++)b[m]=n[m];return a.a.createElement.apply(null,b)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);